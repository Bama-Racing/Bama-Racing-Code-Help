NOTICE: It is possible these files are outdated. Last updated on July 1, 2020.


This year we are moving from an Arduino (a type of Micro Controller) to a Raspberry Pi (RasPi). The RasPi is much more powerful and can even run a full operating system, Linux, which is comprable to Windows.

Linux relies heavily on its terminal for navigation and usage. This terminal looks and functions essentially the same as Command Prompt (CMD) on Windows.

Since Linux is a full operating system, we are able to use a variety of languages to run code. In our case, our only requirements are that it is able to create a graphical user interface (GUI) and is able to interface with the GPIO pins (general-purpose input/output) on the RasPi. These are pins that protrude from the RasPi.

You can see them here: https://docs.microsoft.com/en-us/windows/iot-core/learn-about-hardware/pinmappings/pinmappingsrpi

These GPIO pins run on 3.3v and by turning on and off the power to these pins, the RasPi is able to talk other circuits. We call these circuits breakout boards.

We are currently using four breakout boards. We are using two Hall Effect Sensors (HES or HEF), these detect magnetic fields. We have mounted magnets on different shafts around the engine for these sensors. Once we detect one pass of the magnet, we know that axle has spun around once (we'll get a little more into that in the code section). We also use a Real Time Clock (RTC) which allows us to keep time. Finally, we use a thermistor (or thermometer) to measure the temperature of our transmission.

Almost all of these sensors use a binary system to communicate their output to the RasPi. For example, when the HES detects a magnetic field, it sends 3.3v to the RasPi, when there is no longer a magnetic field, the power is cut. When the RTC wants to denote that one millisecond has passed, it sends a ping of 3.3v to the RasPi.

However, the thermal sensor has to relay more complex data. A number like 80 degrees, cannot be easily and quickly communicated over the GPIO pins. Instead the thermal sensor uses a method called I2C (i squared C) which stands for Inter-Integrated Circuit. This is another method for the RasPi to communicate with its breakout boards. This still uses GPIO pins, but you can spot the I2C connection on the board easily because it uses 2 data connectors to a single breakout board (for a total of 4 connections to the board, including positive and negative) instead of the standard three pins.

Now once all of these breakout boards relay their data to the RasPi and the figures are processed by the code, they are exported to our display which simply connects to the RasPi with an HDMI cable.
