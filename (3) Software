#Backend Code
So, arguably the most important feature the Pi has for us are the GPIO pins. These allow us to take in data from different breakout boards. Most of these breakout boards, as I mentioned before, most of these communicate with the Pi by either sending high or low voltage.

Now the question is, what do we need to tell Python to do once it realizes that one of those boards is sending voltage?

What we use is called an interrupt. What this does is while everything else is running, the interrupt grabs the attention of the computer and says hey, you need to come deal with this. Then, the interrupt hands the computer a list of instructions in the form of a function. Then, the computer goes back to what it was doing and waits for another interrupt.

So, lets say you attach a button to a pin so that whenever you push the button it lets voltage through and attach that to an interrupt. You tell the interrupt to watch pin number 6, for example and you map it to the function buttonPush. Then, in that function, you can say print("Button was pushed") and every time you push that button, you will print out: Button was pushed.

Now, if we map this to a timer, we can keep track of how many milliseconds pass between each button push. Then, if we divide 60 seconds by the amount of time it takes to complete one rotation, and swap out the button for a Hall Effect Sensor, we can calculate how many rotations will happen in 1 minute. Then, if you multiply that by the circumference of the wheels and you can calculate speed.

Once we do this, we can tell the RasPi to print it to the screen and record it to a file. Later, some of the other subteams will be able to access this file and use it for various calculations and diagnostics.

#Front End
After swapping through several user interface (UI) libraries for Python, I have settled on a plugin called Kivy. Naturally, it is the most complicated, and requires you not only to import the library in the code, but also download it onto your computer. It then looks for a .kv file in the same directory as your main Python program. This .kv file uses the Kivy language which allows you to create widgets and customize their appearance. This includes but is not limited to buttons, canvases (a broad term for the ability to create objects with code), etc. It also supports touch screens which might be useful later on if I decide to add the ability for the driver to interact with the display. 
